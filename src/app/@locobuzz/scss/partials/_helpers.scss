@mixin helpers-theme($theme) {
  $background: map-get($theme, background);
  $foreground: map-get($theme, foreground);
  $is-dark: map-get($theme, is-dark);

  $border-style: 1px solid map-get($background, divider);

  $border-light-grey: 1px solid var(--color-light-grey);

  // -----------------------------------------------------------------------------------------------------
  // @ Border helpers
  // -----------------------------------------------------------------------------------------------------

  .border,
  .b {
    border: $border-style;
    &__light-grey {
      border: $border-light-grey;
    }
  }

  .border-top,
  .bt {
    border-top: $border-style;
    &__light-grey {
      border-top: $border-light-grey;
    }
  }

  .border-right,
  .br {
    border-right: $border-style;
    &__light-grey {
      border-right: $border-light-grey;
    }
  }

  .border-bottom,
  .bb {
    border-bottom: $border-style;
    &__light-grey {
      border-bottom: $border-light-grey;
    }
  }

  .border-left,
  .bl {
    border-left: $border-style;
    &__light-grey {
      border-left: $border-light-grey;
    }
  }

  .border-horizontal,
  .bx {
    border-left: $border-style;
    border-right: $border-style;
    &__light-grey {
      border-left: $border-light-grey;
      border-right: $border-light-grey;
    }
  }

  .border-vertical,
  .by {
    border-top: $border-style;
    border-bottom: $border-style;
  }

  .border-none {
    border: none !important;
  }

  .block-center{
    display: flex;
    justify-content: center;
    align-items: center;
  }

}

// -----------------------------------------------------------------------------------------------------
// @ Position helpers
// -----------------------------------------------------------------------------------------------------
@each $breakpoint, $materialBreakpoint in $helper-breakpoints {
  @include media-breakpoint($materialBreakpoint) {
    $infix: if($materialBreakpoint == null, "", "-#{$breakpoint}");

    .position#{$infix}-relative {
      position: relative;
    }

    .position#{$infix}-absolute {
      position: absolute;
    }

    .position#{$infix}-static {
      position: static;
    }
  }
}

// -----------------------------------------------------------------------------------------------------
// @ Absolute position alignment helpers
// -----------------------------------------------------------------------------------------------------
@each $breakpoint, $materialBreakpoint in $helper-breakpoints {
  @include media-breakpoint($materialBreakpoint) {
    $infix: if($materialBreakpoint == null, "", "-#{$breakpoint}");

    .align#{$infix}-top {
      top: 0;
    }

    .align#{$infix}-right {
      right: 0;
    }

    .align#{$infix}-bottom {
      bottom: 0;
    }

    .align#{$infix}-left {
      left: 0;
    }
  }
}

// -----------------------------------------------------------------------------------------------------
// @ Size helpers
// -----------------------------------------------------------------------------------------------------
@each $prop, $abbrev in (height: h, width: w) {
  @for $index from 0 through 800 {
    $size: $index ;
    $length: #{$size}px;

    .#{$abbrev}-#{$size} {
      #{$prop}: $length !important;
      min-#{$prop}: $length !important;
      max-#{$prop}: $length !important;
    }
  }

  // Percentage
  @for $i from 0 through 20 {
    $i-p: 5 * $i;
    $size-p: 5% * $i;

    .#{$abbrev}-#{$i-p}-p {
      #{$prop}: $size-p !important;
    }
  }
}

// -----------------------------------------------------------------------------------------------------
// @ Spacing helpers
// -----------------------------------------------------------------------------------------------------
@each $breakpoint, $materialBreakpoint in $helper-breakpoints {
  @include media-breakpoint($materialBreakpoint) {
    $infix: if($materialBreakpoint == null, "", "-#{$breakpoint}");

    @each $prop, $abbrev in (margin: m, padding: p) {
      @for $index from 0 through 64 {
        $size: $index;
        $length: #{$size}px;

        .#{$abbrev}#{$infix}-#{$size} {
          #{$prop}: $length !important;
        }

      }



      @for $index from 0 through 64 {
        $size: $index;
        $length: #{$size}px;

        .#{$abbrev}x#{$infix}-#{$size} {
          #{$prop}-right: $length !important;
          #{$prop}-left: $length !important;
        }

        .#{$abbrev}y#{$infix}-#{$size} {
          #{$prop}-top: $length !important;
          #{$prop}-bottom: $length !important;
        }
      }

      @for $index from 0 through 64 {
        $size: $index;
        $length: #{$size}px;

        .#{$abbrev}t#{$infix}-#{$size} {
          #{$prop}-top: $length !important;
        }

        .#{$abbrev}r#{$infix}-#{$size} {
          #{$prop}-right: $length !important;
        }

        .#{$abbrev}b#{$infix}-#{$size} {
          #{$prop}-bottom: $length !important;
        }

        .#{$abbrev}l#{$infix}-#{$size} {
          #{$prop}-left: $length !important;
        }
      }

      @if ($abbrev == m) {
        // Some special margin utils for flex alignments
        .m#{$infix}-auto {
          margin: auto !important;
        }

        .mt#{$infix}-auto {
          margin-top: auto !important;
        }

        .mr#{$infix}-auto {
          margin-right: auto !important;
        }

        .mb#{$infix}-auto {
          margin-bottom: auto !important;
        }

        .ml#{$infix}-auto {
          margin-left: auto !important;
        }

        .mx#{$infix}-auto {
          margin-right: auto !important;
          margin-left: auto !important;
        }

        .my#{$infix}-auto {
          margin-top: auto !important;
          margin-bottom: auto !important;
        }
      }
    }
  }
}

.w-auto{
  width: auto !important;
  max-width: none !important;
  min-width: none !important;
}

.overflow-hidden{
  overflow:hidden !important
}

// -----------------------------------------------------------------------------------------------------
// @ Border radius helpers
// -----------------------------------------------------------------------------------------------------
.border-radius-100 {
  border-radius: 100%;
}

.border-radius-2 {
  border-radius: 2px;
}

.border-radius-4 {
  border-radius: 4px;
}

.border-radius-8 {
  border-radius: 8px;
}

.border-radius-16 {
  border-radius: 16px;
}

// -----------------------------------------------------------------------------------------------------
// @ Cursor helpers
// -----------------------------------------------------------------------------------------------------
.cursor-pointer {
  cursor: pointer;
}

.cursor-default {
  cursor: default;
}

.d-flex-items-center {
  display: flex;
  align-items: center;
}

.align-center{
  align-items: center !important;
}

.select__label {
  display: inline-block;
  margin-bottom: 20px;
}

.d-flex-items-center {
  display: flex;
  align-items: center;
}

.no-wrap {
  white-space: nowrap;
}

.img__fluid {
  vertical-align: middle;
  width: 100%;
}
.video__play--icon{
  position: absolute;
  left: 50%;
  top: 50%;
  transform: translate(-50%,-50%);
  color: #fff;
  @include mat-icon-size(40);
  cursor: pointer;
}

.custom__mat_menu {
    border-radius: 8px!important;
    margin-top: 8px;
  > .mat-menu-content{
    width: 180px;
    padding-top: 13px!important;
    padding-bottom: 10px!important;

    >span{
      padding: 0 10px;
    }
    >.mat-menu-item{
      line-height: 35px;

      &:hover{
        background: var(--color--grey)!important;
      }
    }
  }
}

.btn {
  &__icon {
    @include mat-icon-size(15);
  }
}

.matsuffix__close {
  @include mat-icon-size(15);
}

.no-blur {
  backdrop-filter: blur(0);
  background: rgba(0, 0, 0, 0.1);
}

.element__disable {
  pointer-events: none !important;
  opacity: 0.6;
}

.justify-content-flex-end{
  justify-content: flex-end;
}
